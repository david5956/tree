import telebot
from telebot import types
import sqlite3
import threading
import time
from datetime import datetime, timedelta
import os
import logging
from logging.handlers import RotatingFileHandler
import pytz
from dateutil.relativedelta import relativedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logger():
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)

    os.makedirs('logs', exist_ok=True)

    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - [%(funcName)s] - ChatID: %(chat_id)s - User: %(username)s - Reminder: "%(reminder_text)s" - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    file_handler = RotatingFileHandler(
        'logs/bot.log',
        maxBytes=5*1024*1024,
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    return logger

logger = setup_logger()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(os.getenv('TELEGRAM_TOKEN'))
    logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", 
               extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'})
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}", 
                extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'}, 
                exc_info=True)
    exit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    try:
        conn = sqlite3.connect('reminders.db', timeout=30, check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            username TEXT NOT NULL,
            text TEXT NOT NULL,
            time TEXT NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            repeat_interval TEXT,
            next_time TEXT NOT NULL
        )
        ''')
        
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_chat_id ON reminders(chat_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_next_time ON reminders(next_time)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_active ON reminders(is_active)')
        
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", 
                   extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'})
        return conn, cursor
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}", 
                    extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'}, 
                    exc_info=True)
        exit()

conn, cursor = init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        "üìù –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        "üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–≤—Ç–æ—Ä"
    ]
    markup.add(*buttons)
    return markup

def create_repeat_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data='repeat_daily'),
        types.InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data='repeat_weekly'),
        types.InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data='repeat_monthly'),
        types.InlineKeyboardButton("‚ùå –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞", callback_data='repeat_none')
    ]
    markup.add(*buttons)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    try:
        text = (
            "üîî <b>–ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞</b>\n\n"
            "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/remind - –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "/my_reminders - –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            "/del_reminder - –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "/set_repeat - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–≤—Ç–æ—Ä\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
        )
        bot.send_message(
            message.chat.id,
            text,
            parse_mode='HTML',
            reply_markup=create_main_keyboard()
        )
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", 
                   extra={'chat_id': message.chat.id, 
                          'username': message.from_user.username or message.from_user.first_name,
                          'reminder_text': 'N/A'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {str(e)}", 
                    extra={'chat_id': message.chat.id, 
                           'username': message.from_user.username or message.from_user.first_name,
                           'reminder_text': 'N/A'}, 
                    exc_info=True)

@bot.message_handler(commands=['remind'])
def handle_remind_command(message):
    ask_for_reminder(message)

@bot.message_handler(commands=['my_reminders'])
def handle_my_reminders_command(message):
    show_reminders(message)

@bot.message_handler(commands=['del_reminder'])
def handle_del_reminder_command(message):
    ask_for_reminder_id(message)

@bot.message_handler(commands=['set_repeat'])
def handle_set_repeat_command(message):
    ask_for_repeat_id(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda m: m.text in ["‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"])
def handle_create_button(message):
    ask_for_reminder(message)

@bot.message_handler(func=lambda m: m.text in ["üìù –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"])
def handle_list_button(message):
    show_reminders(message)

@bot.message_handler(func=lambda m: m.text in ["‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"])
def handle_delete_button(message):
    ask_for_reminder_id(message)

@bot.message_handler(func=lambda m: m.text in ["üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–≤—Ç–æ—Ä", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–≤—Ç–æ—Ä"])
def handle_repeat_button(message):
    ask_for_repeat_id(message)

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def ask_for_reminder(message):
    try:
        user_states[message.chat.id] = {'state': 'waiting_for_reminder'}
        bot.send_message(
            message.chat.id,
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM –¢–µ–∫—Å—Ç</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>20.10.2025 10:00 –ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å –î–∞–≤–∏–¥–∞ —Å –î–†</code>",
            parse_mode='HTML',
            reply_markup=types.ReplyKeyboardRemove()
        )
        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", 
                   extra={'chat_id': message.chat.id, 
                          'username': message.from_user.username or message.from_user.first_name,
                          'reminder_text': 'N/A'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_for_reminder: {str(e)}", 
                    extra={'chat_id': message.chat.id, 
                           'username': message.from_user.username or message.from_user.first_name,
                           'reminder_text': 'N/A'}, 
                    exc_info=True)

def process_reminder(message):
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
        date_str, time_str, text = parts
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        naive_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
        local_datetime = TIMEZONE.localize(naive_datetime, is_dst=None)
        formatted_time = local_datetime.strftime("%Y-%m-%d %H:%M")
        
        cursor.execute(
            'INSERT INTO reminders(chat_id, username, text, time, next_time) VALUES (?, ?, ?, ?, ?)',
            (message.chat.id, 
             message.from_user.username or message.from_user.first_name, 
             text, 
             formatted_time, 
             formatted_time)
        )
        conn.commit()
        
        logger.info(
            f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –î–∞—Ç–∞='{date_str} {time_str}', –¢–µ–∫—Å—Ç='{text}', ID={cursor.lastrowid}",
            extra={'chat_id': message.chat.id, 
                   'username': message.from_user.username or message.from_user.first_name,
                   'reminder_text': text}
        )
        
        response = (
            f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {date_str} {time_str}\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b> {text}\n\n"
            f"ID: {cursor.lastrowid}"
        )
        
        bot.send_message(
            message.chat.id,
            response,
            parse_mode='HTML',
            reply_markup=create_main_keyboard()
        )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM –¢–µ–∫—Å—Ç\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>20.10.2025 10:00 –ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å –î–∞–≤–∏–¥–∞ —Å –î–†</code>",
            parse_mode='HTML',
            reply_markup=create_main_keyboard()
        )
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", 
                     extra={'chat_id': message.chat.id, 
                            'username': message.from_user.username or message.from_user.first_name,
                            'reminder_text': 'N/A'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}", 
                    extra={'chat_id': message.chat.id, 
                           'username': message.from_user.username or message.from_user.first_name,
                           'reminder_text': 'N/A'}, 
                    exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            reply_markup=create_main_keyboard()
        )
    finally:
        user_states.pop(message.chat.id, None)

def show_reminders(message):
    try:
        cursor.execute(
            '''SELECT id, time, text, repeat_interval 
               FROM reminders 
               WHERE chat_id = ? AND is_active = 1 
               ORDER BY time''',
            (message.chat.id,)
        )
        reminders = cursor.fetchall()
        
        if not reminders:
            bot.send_message(
                message.chat.id,
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
                reply_markup=create_main_keyboard()
            )
            return
            
        response = "üìã <b>–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
        for rem in reminders:
            date_obj = datetime.strptime(rem[1], "%Y-%m-%d %H:%M")
            formatted_time = date_obj.strftime("%d.%m.%Y %H:%M")
            repeat_info = f" (–ø–æ–≤—Ç–æ—Ä: {rem[3]})" if rem[3] else ""
            response += f"üÜî <b>{rem[0]}</b>: ‚è∞ {formatted_time}{repeat_info}\n‚úèÔ∏è {rem[2]}\n\n"
            
        bot.send_message(
            message.chat.id,
            response,
            parse_mode='HTML',
            reply_markup=create_main_keyboard()
        )
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(reminders)})", 
                   extra={'chat_id': message.chat.id, 
                          'username': message.from_user.username or message.from_user.first_name,
                          'reminder_text': 'N/A'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {str(e)}", 
                    extra={'chat_id': message.chat.id, 
                           'username': message.from_user.username or message.from_user.first_name,
                           'reminder_text': 'N/A'}, 
                    exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            reply_markup=create_main_keyboard()
        )

def ask_for_reminder_id(message):
    try:
        user_states[message.chat.id] = {'state': 'waiting_for_reminder_id'}
        bot.send_message(
            message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            parse_mode='HTML',
            reply_markup=types.ReplyKeyboardRemove()
        )
        logger.info("–ó–∞–ø—Ä–æ—Å ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", 
                   extra={'chat_id': message.chat.id, 
                          'username': message.from_user.username or message.from_user.first_name,
                          'reminder_text': 'N/A'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_for_reminder_id: {str(e)}", 
                    extra={'chat_id': message.chat.id, 
                           'username': message.from_user.username or message.from_user.first_name,
                           'reminder_text': 'N/A'}, 
                    exc_info=True)

def delete_reminder(message):
    try:
        reminder_id = int(message.text)
        cursor.execute(
            'SELECT text FROM reminders WHERE id = ? AND chat_id = ?',
            (reminder_id, message.chat.id)
        )
        reminder_text = cursor.fetchone()
        reminder_text = reminder_text[0] if reminder_text else 'N/A'
        
        cursor.execute(
            'DELETE FROM reminders WHERE id = ? AND chat_id = ?',
            (reminder_id, message.chat.id)
        )
        conn.commit()
        
        if cursor.rowcount > 0:
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ <b>{reminder_id}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                parse_mode='HTML',
                reply_markup=create_main_keyboard()
            )
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID: {reminder_id}", 
                       extra={'chat_id': message.chat.id, 
                              'username': message.from_user.username or message.from_user.first_name,
                              'reminder_text': reminder_text})
        else:
            bot.send_message(
                message.chat.id,
                f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ <b>{reminder_id}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
                parse_mode='HTML',
                reply_markup=create_main_keyboard()
            )
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID: {reminder_id}", 
                         extra={'chat_id': message.chat.id, 
                                'username': message.from_user.username or message.from_user.first_name,
                                'reminder_text': 'N/A'})
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –í–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ–≤–æ–π ID</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!",
            parse_mode='HTML',
            reply_markup=create_main_keyboard()
        )
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", 
                     extra={'chat_id': message.chat.id, 
                            'username': message.from_user.username or message.from_user.first_name,
                            'reminder_text': 'N/A'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}", 
                    extra={'chat_id': message.chat.id, 
                           'username': message.from_user.username or message.from_user.first_name,
                           'reminder_text': 'N/A'}, 
                    exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            reply_markup=create_main_keyboard()
        )
    finally:
        user_states.pop(message.chat.id, None)

def ask_for_repeat_id(message):
    try:
        user_states[message.chat.id] = {'state': 'waiting_for_repeat_id'}
        bot.send_message(
            message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞:",
            parse_mode='HTML',
            reply_markup=types.ReplyKeyboardRemove()
        )
        logger.info("–ó–∞–ø—Ä–æ—Å ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞", 
                   extra={'chat_id': message.chat.id, 
                          'username': message.from_user.username or message.from_user.first_name,
                          'reminder_text': 'N/A'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_for_repeat_id: {str(e)}", 
                    extra={'chat_id': message.chat.id, 
                           'username': message.from_user.username or message.from_user.first_name,
                           'reminder_text': 'N/A'}, 
                    exc_info=True)

def process_repeat_id(message):
    try:
        reminder_id = int(message.text)
        cursor.execute(
            'SELECT id, text FROM reminders WHERE id = ? AND chat_id = ?',
            (reminder_id, message.chat.id)
        )
        reminder = cursor.fetchone()
        
        if not reminder:
            bot.send_message(
                message.chat.id,
                f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ <b>{reminder_id}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
                parse_mode='HTML',
                reply_markup=create_main_keyboard()
            )
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–≤—Ç–æ—Ä –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID: {reminder_id}", 
                         extra={'chat_id': message.chat.id, 
                                'username': message.from_user.username or message.from_user.first_name,
                                'reminder_text': 'N/A'})
            return
            
        user_states[message.chat.id] = {
            'state': 'waiting_for_repeat_interval',
            'reminder_id': reminder_id
        }
        bot.send_message(
            message.chat.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è <b>{reminder_id}</b>:",
            parse_mode='HTML',
            reply_markup=create_repeat_keyboard()
        )
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID: {reminder_id}", 
                   extra={'chat_id': message.chat.id, 
                          'username': message.from_user.username or message.from_user.first_name,
                          'reminder_text': reminder[1]})
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –í–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ–≤–æ–π ID</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!",
            parse_mode='HTML',
            reply_markup=create_main_keyboard()
        )
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞", 
                     extra={'chat_id': message.chat.id, 
                            'username': message.from_user.username or message.from_user.first_name,
                            'reminder_text': 'N/A'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞: {str(e)}", 
                    extra={'chat_id': message.chat.id, 
                           'username': message.from_user.username or message.from_user.first_name,
                           'reminder_text': 'N/A'}, 
                    exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=create_main_keyboard()
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('repeat_'))
def handle_repeat_selection(call):
    try:
        chat_id = call.message.chat.id
        if user_states.get(chat_id, {}).get('state') != 'waiting_for_repeat_interval':
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            return
            
        reminder_id = user_states[chat_id]['reminder_id']
        interval = call.data.split('_')[1]
        
        cursor.execute(
            'SELECT text FROM reminders WHERE id = ? AND chat_id = ?',
            (reminder_id, chat_id)
        )
        reminder_text = cursor.fetchone()[0]
        
        if interval == 'none':
            cursor.execute(
                'UPDATE reminders SET repeat_interval = NULL WHERE id = ?',
                (reminder_id,)
            )
            message_text = f"üîÑ –ü–æ–≤—Ç–æ—Ä –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è <b>{reminder_id}</b> –æ—Ç–∫–ª—é—á–µ–Ω"
        else:
            cursor.execute(
                'UPDATE reminders SET repeat_interval = ? WHERE id = ?',
                (interval, reminder_id)
            )
            message_text = f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è <b>{reminder_id}</b>: {interval}"
        
        conn.commit()
        bot.edit_message_text(
            message_text,
            chat_id,
            call.message.message_id,
            parse_mode='HTML'
        )
        bot.send_message(
            chat_id,
            "–ì–æ—Ç–æ–≤–æ! ‚úÖ",
            reply_markup=create_main_keyboard()
        )
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID: {reminder_id}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}", 
                   extra={'chat_id': chat_id, 
                          'username': call.from_user.username or call.from_user.first_name,
                          'reminder_text': reminder_text})
        user_states.pop(chat_id, None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_repeat_selection: {str(e)}", 
                    extra={'chat_id': call.message.chat.id, 
                           'username': call.from_user.username or call.from_user.first_name,
                           'reminder_text': 'N/A'}, 
                    exc_info=True)
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def check_reminders():
    while True:
        try:
            now = datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M")
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ {now}", 
                      extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'})
            
            cursor.execute(
                "SELECT id, chat_id, text, repeat_interval, next_time "
                "FROM reminders WHERE next_time <= ? AND is_active = 1",
                (now,)
            )
            reminders = cursor.fetchall()
            
            for rem in reminders:
                try:
                    bot.send_message(
                        rem[1], 
                        f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> {rem[2]}", 
                        parse_mode='HTML'
                    )
                    logger.info(
                        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ID={rem[0]}, –¢–µ–∫—Å—Ç='{rem[2]}'",
                        extra={'chat_id': rem[1], 
                               'username': 'SYSTEM',
                               'reminder_text': rem[2]}
                    )
                    
                    if rem[3]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä
                        update_repeated_reminder(rem)
                    else:
                        cursor.execute(
                            "UPDATE reminders SET is_active = 0 WHERE id = ?",
                            (rem[0],)
                        )
                        conn.commit()
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID={rem[0]}: {str(e)}",
                        extra={'chat_id': rem[1], 
                               'username': 'SYSTEM',
                               'reminder_text': rem[2]}, 
                        exc_info=True
                    )
                    time.sleep(5)

            time.sleep(30)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_reminders: {str(e)}", 
                        extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'}, 
                        exc_info=True)
            time.sleep(60)

def update_repeated_reminder(reminder):
    try:
        rem_id, chat_id, text, interval, next_time = reminder
        next_time_obj = TIMEZONE.localize(datetime.strptime(next_time, "%Y-%m-%d %H:%M"))
        
        if interval == 'daily':
             new_time = next_time_obj + timedelta(days=1)
        elif interval == 'weekly':
            new_time = next_time_obj + timedelta(weeks=1)
        elif interval == 'monthly':
            new_time = next_time_obj + relativedelta(months=1)
        else:
            return
            
        new_time_str = new_time.strftime("%Y-%m-%d %H:%M")
        cursor.execute(
            'UPDATE reminders SET next_time = ? WHERE id = ?',
            (new_time_str, rem_id)
        )
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID={rem_id}: {str(e)}", 
                    extra={'chat_id': chat_id, 
                           'username': 'SYSTEM',
                           'reminder_text': text}, 
                    exc_info=True)
        time.sleep(5)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    try:
        chat_id = message.chat.id
        state = user_states.get(chat_id, {}).get('state')
        
        if state == 'waiting_for_reminder':
            process_reminder(message)
        elif state == 'waiting_for_reminder_id':
            delete_reminder(message)
        elif state == 'waiting_for_repeat_id':
            process_repeat_id(message)
        else:
            bot.send_message(
                chat_id,
                "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=create_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", 
                    extra={'chat_id': message.chat.id, 
                           'username': message.from_user.username or message.from_user.first_name,
                           'reminder_text': 'N/A'}, 
                    exc_info=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        logger.info("----- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -----", 
                   extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'})
        
        reminder_thread = threading.Thread(target=check_reminders, daemon=True)
        reminder_thread.start()
        logger.info(f"–ü–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω: {reminder_thread.is_alive()}", 
                   extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'})
        
        bot.infinity_polling()
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                   extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'})
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", 
                       extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'}, 
                       exc_info=True)
    finally:
        try:
            conn.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ", 
                       extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: {str(e)}", 
                        extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'})
        
        logger.info("----- –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ -----", 
                   extra={'chat_id': 'SYSTEM', 'username': 'SYSTEM', 'reminder_text': 'N/A'})
        